/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.1.0 - tomw - Pre-release version

*/

definition(
    name: "Image Server",
    namespace: "tomw",
    author: "tomw",
    description: "",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "")

preferences
{
    page(name: "entryPage")
    page(name: "webServerPage")
    page(name: "pushoverPage")
}

def uninstalled()
{
    unsubscribe()
}

def entryPage()
{
    dynamicPage(name: "entryPage", title: "", install: true, uninstall: true)
    {
        section
        {
            href(page: "webServerPage", title: "<b>Select devices to serve images for dashboards and webpages.</b>")
            href(page: "pushoverPage", title: "<b>Select devices to use for Pushover notifications.</b>")
        }
        section
        {
            input name:	"enableLogging", type: "bool", title: "Enable Debug Logging?", defaultValue: false, required: true
        }
    }
}

def linkToMain()
{
    return href(page: "entryPage", title: "<b>Return to main page.</b>")
}

def webServerPage()
{
    dynamicPage(name: "webServerPage", title: "", install: true, uninstall: true)
    {
        section
        {
            input name:	"sourceDevs", type: "capability.*", title: "Select any devices with the 'image' attribute.", multiple: true, required: false, submitOnChange: true
        }
        section
        {
            paragraph("<h2>Use these URLs to access images:</h2>")
            
            for(dev in sourceDevs)
            {
                paragraph("<b>${dev.getName()}:</b>")
                paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${imagePath}/${dev.getDeviceNetworkId()}?access_token=${token}"}</p>")
            }
            
            paragraph("<b>Single most recent image out of all of the selected devices:</b>")
            paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${latestPath}?access_token=${token}"}</p>")
        }
        section
        {
            linkToMain()
        }
    }
}

def pushoverPage()
{
    dynamicPage(name: "pushoverPage", title: "", install: true, uninstall: true)
    {
        unsubscribe()
        if(pushoverDevs)
        {
            subscribe(pushoverDevs, "image", "notificationHandler")
        }
        section
        {
            input name:	"pushoverDevs", type: "capability.*", title: "Select any devices with the 'image' attribute.", multiple: true, required: false, submitOnChange: true
            input name:	"poUserKey", type: "text", title: "Pushover User Key", required: false
            input name:	"poApiToken", type: "text", title: "Pushover API Token", required: false
        }        
        section
        {
            linkToMain()
        }
    }
}

def logDebug(msg)
{
    if(enableLogging)
    {
        log.debug "${msg}"
    }
}

def getToken()
{
    if(!state.accessToken)
    {
        createAccessToken()
    }
    
    return state.accessToken
}

import groovy.transform.Field
@Field String imagePath = "image"
@Field String latestPath = "latest"

mappings
{
    path("/${imagePath}/:devDni")
    {
        action:
            [
                GET: "serveImage"
            ]
    }
    
    path("/${latestPath}")
    {
        action:
            [
                GET: "serveLatest"
            ]
    }
}

def serveImage()
{
    def reqDev = params.devDni
    
    logDebug("Image Server request for ${reqDev}")
    
    try
    {
        for(dev in sourceDevs)
        {
            if(reqDev == dev.getDeviceNetworkId())
            {
                if(null == dev.currentValue('image'))
                {
                    throw new Exception("no image attribute present")
                }
            
                logDebug("Image Server matched ${dev.getName()}")            
                
                return render(renderImageMap(dev))
            }
        }
        
        throw new Exception("no matching device")
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }
}

def serveLatest()
{
    try
    {
        def time = 0
        def latestDev
        
        for(dev in sourceDevs)
        {
            dev.events().each
            {
                if( invalidImageVals().contains(dev.currentValue('image')?.toString()) ) { return }
                if((it.name == "image"))
                {
                    if(it.getUnixTime() > time)
                    {
                        time = it.getUnixTime()
                        latestDev = dev
                    }
                }
            }
        }
        
        // Fail-safe -- if events have aged out, just use the first device.
        //     This feels like a bug in the Hubitat Device.events() API
        if(null == latestDev) { latestDev = sourceDevs?.getAt(0) }
        
        return render(renderImageMap(latestDev))
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }    
}

def invalidImageVals()
{
    // "n/a" is the default state after clearImages()
    return [null, "n/a"]
}

def renderImageMap(dev)
{
    def image = getImageAttr(dev)
    if(null == image)
    {
        // the file was deleted, or something
        throw new Exception("image missing")
    }
    
    def imageArr = hubitat.helper.HexUtils.hexStringToByteArray(image)
    return [contentType: "image/jpeg;base64", data: imageArr, status: 200]
}

def getImageAttr(dev)
{
    def image = dev.currentValue('image')
    
    if(invalidImageVals().contains(image.toString()))
    {        
        throw new Exception("no image present")
    }
    
    if(image?.contains("http"))
    {
        // new-style images are stored in the File Manager
        //   and the 'image' attribute is the local URL to the image
        image = readImageFromFile(image)
    }
    
    return image    
}

def notificationHandler(evt)
{
    def dev = evt.getDevice()
    def title = evt.getDisplayName()
    def date = evt.getDate()
    
    if(dev.currentValue('image') != "n/a")
    {
        logDebug("new image on device: ${dev}")
        pushoverNotification(dev, title, "New image: ${date}")
    }
}

def readImageFromFile(filePath)
{
    def params = 
        [
            uri: filePath,
            contentType: "text/plain",
            textParser: true
        ]
    
    try
    {
        httpGet(params)
        { resp ->
            return strReaderToString(resp?.data)
        }
    }
    catch(Exception e)
    {
		log.error "Error reading file: ${e.message}"
    }
}

def pushoverNotification(dev, String title = "", String message = "New Image")
{
    if([poUserKey, poApiToken].contains(null))
    {
        logDebug("missing Pushover credentials")
        return
    }
    
    def imageArr = hubitat.helper.HexUtils.hexStringToByteArray(getImageAttr(dev))
    
    // thanks!
    //  below code was referenced from Younes at https://community.hubitat.com/t/solved-pushover-notification-with-image/102299
    
    //Top Part of the POST request Body
    def postBodyTop = 
        """----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="user"\r\n\r\n${poUserKey}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="token"\r\n\r\n${poApiToken}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="title"\r\n\r\n${title}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="message"\r\n\r\n${message}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="attachment"; filename="image.jpg"\r\nContent-Type: image/jpeg\r\n\r\n"""

    //Bottom Part of the POST request Body
    def postBodyBottom = """\r\n----rjtvk266t3df6jkpb4--"""
    
    try
    {
        byte[] postBodyTopArr = postBodyTop.getBytes("UTF-8")
        byte[] postBodyBottomArr = postBodyBottom.getBytes("UTF-8")
        
        //Combine different parts of the POST request body
        ByteArrayOutputStream postBodyOutputStream = new ByteArrayOutputStream();
        
        postBodyOutputStream.write(postBodyTopArr);
        postBodyOutputStream.write(imageArr);
        postBodyOutputStream.write(postBodyBottomArr);
        
        byte[] postBody = postBodyOutputStream.toByteArray();
        
        //Build HTTP Request Parameters
        def params =
        [
            requestContentType: "application/octet-stream",
            headers: ["content-type": "multipart/form-data; boundary=--rjtvk266t3df6jkpb4"],
            uri: "https://api.pushover.net/1/messages.json",
            body: postBody
        ]
        
        httpPost(params)
        { resp ->
            if(resp.status != 200)
            {
                throw new Exception("HTTP error: ${resp.status}")
            }
        }
    }
    catch(Exception e)
    {
        log.error "pushoverNotification error: ${e.message}"
    }
}

def strReaderToString(reader)
{
    if(null == reader) { return }
    
    // https://stackoverflow.com/a/17751100
    java.lang.StringBuilder builder = new java.lang.StringBuilder()
    
    // non-zero value so we read at least once
    int charsRead = 1
    char[] chars = new char[1024]
    
    while(charsRead > 0)
    {
        charsRead = reader.read(chars, 0, chars.length)
        if(charsRead>0) { builder.append(chars, 0, charsRead) }
    }
    
    def str = builder.toString()
    
    return str
}
