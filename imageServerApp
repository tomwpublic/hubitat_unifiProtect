/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.1.0 - tomw - Pre-release version

*/

definition(
    name: "Image Server",
    namespace: "tomw",
    author: "tomw",
    description: "",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "")

preferences
{
    page(name: "mainPage1")
    page(name: "mainPage2")
}

def mainPage1()
{
    dynamicPage(name: "mainPage1", title: "", nextPage: "mainPage2", install: false, uninstall: true)
    {
        section
        {
            input name:	"sourceDevs", type: "capability.*", title: "Select any devices with the 'image' attribute.", multiple: true, required: true
        }
        section
        {
            input name:	"enableLogging", type: "bool", title: "Enable Debug Logging?", defaultValue: false, required: true
        }
    }
}

def mainPage2()
{
    def token = getToken()
    
    dynamicPage(name: "mainPage2", title: "", install: true, uninstall: true)
    {
        section
        {
            paragraph("<b>Most recent image out of all of the selected devices:</b>")
            paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${latestPath}?access_token=${token}"}</p>")
        }
        section
        {
            for(dev in sourceDevs)
            {
                paragraph("<b>${dev.getName()}:</b>")
                paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${imagePath}/${dev.getDeviceNetworkId()}?access_token=${token}"}</p>")
                paragraph("<p style='margin-left:10%'>${getFullApiServerUrl() + "/${imagePath}/${dev.getDeviceNetworkId()}?access_token=${token}"}</p>")
            }
        }
    }
}

def logDebug(msg)
{
    if(enableLogging)
    {
        log.debug "${msg}"
    }
}

def getToken()
{
    if(!state.accessToken)
    {
        createAccessToken()
    }
    
    return state.accessToken
}

import groovy.transform.Field
@Field String imagePath = "image"
@Field String latestPath = "latest"

mappings
{
    path("/${imagePath}/:devDni")
    {
        action:
            [
                GET: "serveImage"
            ]
    }
    
    path("/${latestPath}")
    {
        action:
            [
                GET: "serveLatest"
            ]
    }
}

def serveImage()
{
    def reqDev = params.devDni
    
    logDebug("Image Server request for ${reqDev}")
    
    try
    {
        for(dev in sourceDevs)
        {
            if(reqDev == dev.getDeviceNetworkId())
            {
                if(null == dev.currentValue('image'))
                {
                    throw new Exception("no image attribute present")
                }
            
                logDebug("Image Server matched ${dev.getName()}")            
                
                return render(renderImageMap(dev))
            }
        }
        
        throw new Exception("no matching device")
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }
}

def serveLatest()
{
    try
    {
        def time = 0
        def latestDev
        
        for(dev in sourceDevs)
        {
            dev.events().each
            {
                if(it.name == "image")
                {
                    if(it.getUnixTime() > time)
                    {
                        time = it.getUnixTime()
                        latestDev = dev
                    }
                }
            }
        }

        return render(renderImageMap(latestDev))
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }
    
}

def renderImageMap(dev)
{
    def image = dev.currentValue('image')
    
    def encodedImage = hubitat.helper.HexUtils.hexStringToByteArray(dev.currentValue('image'))
    return [contentType: "image/jpeg;base64", data: encodedImage, status: 200]
}
